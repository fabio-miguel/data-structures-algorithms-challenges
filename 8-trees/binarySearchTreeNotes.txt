REMINDER

- Linked lists are a type of a tree. They have a linear data structure.

// -------------------------------------------------------------------
BST

- Most common tree structure and a subset of the binary tree structure. 
- Binary trees have a hierarchical structure. 
- Each node can only have 0, 1 or 2 nodes.
- Each node represents a certain state. 

- Big O:
--- lookup - O(log n)
--- insert - O(log n)
--- delete - 0(log n)


// -------------------------------------------------------------------
O(log n)

What is a Logarithm?
- A logarithm is the POWER / exponent of the base number that needs to be raised by to get another number.
- In computer science, 2 is the common base number (binary).


- Because of the way binary trees are structured, there is a certain whay for us to calculate the number of nodes that they have. 
--- level 0 (top node): 2^0 = 1
--- level 1: 2^1 = 2
--- level 2: 2^2 = 4
--- level 3: 2^3 = 8 
  
- No. of nodes = 2^h - 1
- In a base 10 system, 2 is the logrithm (the power / exponent) to raise a base number.
- Also, note that "h" or height starts at 1, thus we subtract 1 to account for this. 

// -------------------------------------------------------------------

PROBLEMS WITH BST

- If you have heavily unbalanced tree, you can essentially end up with a linked list where you will have to traverse every node. 
- In this unbalanced tree, lookup, insert and delete become O(n), like linked lists. 
- Therefore, ideally we want to balance our search trees, so we can have the O(log n) performance optimisation.
- AVL & Red Black trees are examples that help balance a tree.

 // -------------------------------------------------------------------

 PROS 

 - Better than O(n) operations. All O(log n). So, really good performance across the board (if balanced).
 - Ordered.
 - Flexible size as you can place the node anywhere in memory.

 CONS 

 - No O(1) operations as you usually have to do some sort of traversal through the tree for ANY sort of operation. 
 - Worst case (if unblanaced) all operations can become O(n). 


// -------------------------------------------------------------------
binarySearchTree.js
// -------------------------------------------------------------------

- "Node" is a class that instantiates node object instances
- This defines a node in the Binary Search Tree
- Each node instance has a value & left & right props that point to its child nodes.

// -------------------------------------------------------------------

- "BST" is a class that when instatiated will immediately execute its constructor
- This will create a Node instance
- This instance is assigned as the root node with the initial value for the tree
- E.g. const bst = new BST(15) will create a Node object instance which is assigned as the root of the Binary Search Tree (BST)
- BST also has a count defined as 1 as it will always instatiate Node class and begin count as 1 (i.e. the root node).

// -------------------------------------------------------------------

- insert(value) method inserts values into the BST
- It instatiates a new Node object with a value passed in
- An anonymous function takes a node parameter, which when called, is the root node
- If the value entered at instatiation of new Node is less than the root node's value (node.value)...
- Nested if to check if there isn't a node assigned to node.left
- If there isn't a left node, then assign this newNode instatiation to node.left
- Else, if there is a left node, recursive call to call the function again with the current node.left as the arguement and will check left again of this left node!
- The same logic applies for the right node, but ofcourse checks if value is greater than route node
- This follows the principles of Binary Search trees where numbers less than the root are stored left and those greater are stored right. 

// -------------------------------------------------------------------

// in-order depth first search

dfsInOrder() {
        let result = [];

        const traverse = node => {
            //if left child exists, go left again
            if (node.left) traverse(node.left)
            // capture root node value
            result.push(node.value);
            // if right child exists, go right again
            if (node.right) traverse(node.right)
            
        }

        traverse(this.root);
        return result;
    }

- Recursion is being used in the traverse function. 
- One thing to note is that recursion is hardly ever used and generally advised against.
- This is because you can create stack overflow (the stack is explained below).
- There are languages that specifically cater for recursion with tail call optimisation. Languages like Scala. 
- Now, the traverse function takes in the root node. 
- It checks if there is a node left, if true it recursively calls the function. 
- At this point, the root node is "paused" and added to the stack! 
- It is looking at the left child node (3) if there is a left child node. There is so 3 is "paused" and added to the stack.
- We have arrived at the left most node (leaf node), which is 2 and no longer meets the condition of more left nodes.
- 2 gets pushed to the result array.
- And now the stack begins to "unwind". 
- Next in the stack is the parent node (3) which gets pushed and also has a right node (12) 
- So that right node gets checked for a left node, which it doesn't then it gets pushed to result array and checked for right node which it doesn't have.
- Then, we address the next node in the stack which is 15 and the traverse function will push this and begin to do the same process on the right side.
- output: 2, 3, 12, 15 28 36 39

- Note: pre-order and post-order depth first search follow a similar logic, just in different order
- Note: also, this could have been completed without recursion, by using a while loop. But, three lines of code is readable and maintainable. 

// -------------------------------------------------------------------

OTHER TREE STRUCTURES

1. Binary Heap:
-- Child nodes are less than parent nodes. However, they aren't sorted to left is always less and right is always more than parent node. 

-- Big 0:
---- lookup - O(n)
---- insert - O(log n)
---- delete - O(log n)

-- Why Binary Heap? 
---- Really great at doing comparative operations, which would be a hard / O(n) operation on a BST. 
---- For example, I want all the values 
 
-- Uses:
---- Data storage, priority queues, sorting algortihms. 

